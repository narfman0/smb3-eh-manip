[app]

; This is the index of the video card in your system.
; To configure this, ensure `show_capture_video` is set to true, run the tool,
; and see if the capture window is correct. You should see your nes output.
; Note: this can be the path to a video, if you'd like :shrug:
video_capture_source = 2

; We need to measure the perceived latency of what frame this
; tool thinks we are playing against the monitor the player is perceiving. We
; need to offset the beginning of TAS playback that amount.
; Example: it takes ~36ms for the avermedia 4k capture card to show frames on
; screen, 30.66ms for that to get to this tool and render a video frame. That's
; [conveniently ;)] 66.6ms, or 4 nes frames. So we should begin the playback 66
; ms in.
latency_ms = 66

; when the trigger frame is detected, should we render a ui crafted to represent visual stimulii
enable_ui_player = true

; Enabled/disables a TAS EH video playing directly from
; this tool upon seeing the trigger frame.
enable_video_player = true

; play audio cues to line up and execute the jumps
enable_audio_player = true

; This is an optional debugging property to help identify
; your video capture source index. It shows what images are matched, and should
; be disabled after configuration to reduce computational load.
show_capture_video = true

; Writes the capture card video to a file, by default,
; capture.avi in the current working directory. This can be used to get trigger
; images directly from the capture card in a complementary way to how the tool
; works.
write_capture_video = true

; when the tool sees the data/reset.png in the current frame from the capture
; card, should it reset to get ready for the next run. true/false
autoreset = false

; These regions are a set of x,y,width,height integers representing
; where the images are the tool uses to calibrate, start eh video, and reset
; (if using the optional autoreset function). The processing time takes so long
; without regions, like 20-30ms, please consider configuring regions!
; Some examples which narfman0 uses:
; reset_image_region = 120,340,100,100
; calibration_start_frame_image_region = 139,318,30,40
; eh_start_frame_image_region = 100,320,44,74

; Select what the tool is comparing against. Options:
; 'eh' is when attempting runs and runs your configured emu/video/ui
; 'twoone' is experimental but should aid in practice.
; 'calibration' can make determinind latency_ms faster.
computer = eh

; [OPTIONAL] these values are more rarely changed

; [beta] Detect and remediate lag frames during gameplay
;auto_detect_lag_frames = false
;auto_detect_lag_frame_windows = 2500-2725
;enable_auto_detect_lag_frame_ui = false

; [beta] after getting the end level card, the text
; "level clear" appears. With this set to true, the tool will write the time
; since the run started (start trigger was seen).
; track_end_stage_clear_text_time = false

; Enable/disables sending fceux the 'pause' keystroke
; when the trigger frame has been detected.
; enable_fceux_tas_start = false

; scale playback video
; video_player_scale = 1

; if you arent getting any matches, you might consider lowering this.
; if you get false positives, consider raising it.
; confidence = 0.95
; write_capture_video_path = capture.avi

; Overwrite wherever you'd like your audio cue to be found
; audio_cue_path = data/audio_cue.wav

; end_stage_clear_text_path = data/endStageClearText.png
; reset_image_path = data/reset.png
; calibration_start_frame_image_path = data/calibration/trigger.png
; calibration_video_path = data/calibration/video.mp4
; eh_start_frame_image_path = data/eh/trigger.png
; eh_video_path = data/eh/video.avi
; two_one_start_frame_image_path = data/two_one/trigger.png
; two_one_video_path = data/two_one/video.mp4

; console_log_level = INFO
; file_log_level = INFO